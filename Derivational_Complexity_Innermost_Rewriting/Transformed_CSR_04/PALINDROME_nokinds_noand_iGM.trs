(VAR I P V V1 V2 X X1 X2 Y Z )
(STRATEGY INNERMOST)
(RULES 
        active(__(__(X,Y),Z)) -> mark(__(X,__(Y,Z)))
        active(__(X,nil)) -> mark(X)
        active(__(nil,X)) -> mark(X)
        active(U11(tt)) -> mark(tt)
        active(U21(tt,V2)) -> mark(U22(isList(V2)))
        active(U22(tt)) -> mark(tt)
        active(U31(tt)) -> mark(tt)
        active(U41(tt,V2)) -> mark(U42(isNeList(V2)))
        active(U42(tt)) -> mark(tt)
        active(U51(tt,V2)) -> mark(U52(isList(V2)))
        active(U52(tt)) -> mark(tt)
        active(U61(tt)) -> mark(tt)
        active(U71(tt,P)) -> mark(U72(isPal(P)))
        active(U72(tt)) -> mark(tt)
        active(U81(tt)) -> mark(tt)
        active(isList(V)) -> mark(U11(isNeList(V)))
        active(isList(nil)) -> mark(tt)
        active(isList(__(V1,V2))) -> mark(U21(isList(V1),V2))
        active(isNeList(V)) -> mark(U31(isQid(V)))
        active(isNeList(__(V1,V2))) -> mark(U41(isList(V1),V2))
        active(isNeList(__(V1,V2))) -> mark(U51(isNeList(V1),V2))
        active(isNePal(V)) -> mark(U61(isQid(V)))
        active(isNePal(__(I,__(P,I)))) -> mark(U71(isQid(I),P))
        active(isPal(V)) -> mark(U81(isNePal(V)))
        active(isPal(nil)) -> mark(tt)
        active(isQid(a)) -> mark(tt)
        active(isQid(e)) -> mark(tt)
        active(isQid(i)) -> mark(tt)
        active(isQid(o)) -> mark(tt)
        active(isQid(u)) -> mark(tt)
        mark(__(X1,X2)) -> active(__(mark(X1),mark(X2)))
        mark(nil) -> active(nil)
        mark(U11(X)) -> active(U11(mark(X)))
        mark(tt) -> active(tt)
        mark(U21(X1,X2)) -> active(U21(mark(X1),X2))
        mark(U22(X)) -> active(U22(mark(X)))
        mark(isList(X)) -> active(isList(X))
        mark(U31(X)) -> active(U31(mark(X)))
        mark(U41(X1,X2)) -> active(U41(mark(X1),X2))
        mark(U42(X)) -> active(U42(mark(X)))
        mark(isNeList(X)) -> active(isNeList(X))
        mark(U51(X1,X2)) -> active(U51(mark(X1),X2))
        mark(U52(X)) -> active(U52(mark(X)))
        mark(U61(X)) -> active(U61(mark(X)))
        mark(U71(X1,X2)) -> active(U71(mark(X1),X2))
        mark(U72(X)) -> active(U72(mark(X)))
        mark(isPal(X)) -> active(isPal(X))
        mark(U81(X)) -> active(U81(mark(X)))
        mark(isQid(X)) -> active(isQid(X))
        mark(isNePal(X)) -> active(isNePal(X))
        mark(a) -> active(a)
        mark(e) -> active(e)
        mark(i) -> active(i)
        mark(o) -> active(o)
        mark(u) -> active(u)
        __(mark(X1),X2) -> __(X1,X2)
        __(X1,mark(X2)) -> __(X1,X2)
        __(active(X1),X2) -> __(X1,X2)
        __(X1,active(X2)) -> __(X1,X2)
        U11(mark(X)) -> U11(X)
        U11(active(X)) -> U11(X)
        U21(mark(X1),X2) -> U21(X1,X2)
        U21(X1,mark(X2)) -> U21(X1,X2)
        U21(active(X1),X2) -> U21(X1,X2)
        U21(X1,active(X2)) -> U21(X1,X2)
        U22(mark(X)) -> U22(X)
        U22(active(X)) -> U22(X)
        isList(mark(X)) -> isList(X)
        isList(active(X)) -> isList(X)
        U31(mark(X)) -> U31(X)
        U31(active(X)) -> U31(X)
        U41(mark(X1),X2) -> U41(X1,X2)
        U41(X1,mark(X2)) -> U41(X1,X2)
        U41(active(X1),X2) -> U41(X1,X2)
        U41(X1,active(X2)) -> U41(X1,X2)
        U42(mark(X)) -> U42(X)
        U42(active(X)) -> U42(X)
        isNeList(mark(X)) -> isNeList(X)
        isNeList(active(X)) -> isNeList(X)
        U51(mark(X1),X2) -> U51(X1,X2)
        U51(X1,mark(X2)) -> U51(X1,X2)
        U51(active(X1),X2) -> U51(X1,X2)
        U51(X1,active(X2)) -> U51(X1,X2)
        U52(mark(X)) -> U52(X)
        U52(active(X)) -> U52(X)
        U61(mark(X)) -> U61(X)
        U61(active(X)) -> U61(X)
        U71(mark(X1),X2) -> U71(X1,X2)
        U71(X1,mark(X2)) -> U71(X1,X2)
        U71(active(X1),X2) -> U71(X1,X2)
        U71(X1,active(X2)) -> U71(X1,X2)
        U72(mark(X)) -> U72(X)
        U72(active(X)) -> U72(X)
        isPal(mark(X)) -> isPal(X)
        isPal(active(X)) -> isPal(X)
        U81(mark(X)) -> U81(X)
        U81(active(X)) -> U81(X)
        isQid(mark(X)) -> isQid(X)
        isQid(active(X)) -> isQid(X)
        isNePal(mark(X)) -> isNePal(X)
        isNePal(active(X)) -> isNePal(X)
        
)
    